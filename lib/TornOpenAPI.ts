/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    '/forum/?selections=categories': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of publicly available forum categories
         * @description It is possible to get threads from returned public categories
         */
        get: {
            parameters: {
                query: {
                    /** @description API key (Public) */
                    key: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['ForumCategories'];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/forum/?selections=threads': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get threads
         * @description Returns a list of threads for the chosen forum category (or categories)
         */
        get: {
            parameters: {
                query: {
                    /** @description API key (Public) */
                    key: string;
                    limit?: number;
                    /** @description Sorted by the greatest of first_post_time and last_post_time timestamps */
                    sort?: 'DESC' | 'ASC';
                    /** @description Returns threads created before this timestamp */
                    to?: number;
                    /** @description Returns threads created after this timestamp */
                    from?: number;
                    /** @description The forum ID or a list of forum IDs */
                    id?: components['schemas']['ForumId'][];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': {
                            threads?: components['schemas']['ForumThreadBase'][];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/forum/?selections=thread': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get specific thread details
         * @description Return the details of a thread including topic content and poll (if any).
         */
        get: {
            parameters: {
                query: {
                    /** @description API key (Public) */
                    key: string;
                    /** @description Thread id */
                    id: components['schemas']['ForumThreadId'];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': {
                            thread?: components['schemas']['ForumThreadExtended'];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/forum/?selections=posts': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get specific thread posts
         * @description Returns 20 posts per page for the specific thread.
         */
        get: {
            parameters: {
                query: {
                    /** @description API key (Public) */
                    key: string;
                    offset?: number;
                    /** @description Determines if the 'content' field returns raw HTML or plain text */
                    cat?: 'raw' | 'plain';
                    /** @description Thread id */
                    id: components['schemas']['ForumThreadId'];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': {
                            posts?: components['schemas']['ForumPost'][];
                            _links?: components['schemas']['RequestLinks'];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/racing/?selections=races': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get races
         * @description Returns a list of races, ordered by race start timestamp
         */
        get: {
            parameters: {
                query: {
                    /** @description API key (Public) */
                    key: string;
                    limit?: number;
                    /** @description Sorted by schedule.start field */
                    sort?: 'DESC' | 'ASC';
                    /** @description Timestamp until when started races are returned (schedule.start) */
                    to?: number;
                    /** @description Timestamp after when started races are returned (scheduled.start) */
                    from?: number;
                    /** @description Category of races returned */
                    cat?: 'official' | 'custom';
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['Races'];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/racing/?selections=records': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get track records
         * @description Returns a list of 10 best lap records for the chosen track and car class. Results are cached globally 1 hour
         */
        get: {
            parameters: {
                query: {
                    /** @description API key (Public) */
                    key: string;
                    /** @description Track id */
                    id: components['schemas']['RaceTrackId'];
                    /** @description Car class */
                    cat: components['schemas']['RaceClassEnum'];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['RaceRecords'];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/racing/?selections=race': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get specific race details
         * @description Return the details of a race.
         */
        get: {
            parameters: {
                query: {
                    /** @description API key (Public) */
                    key: string;
                    /** @description Race id */
                    id: components['schemas']['RaceId'];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['RaceDetails'];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/racing/?selections=cars': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get cars and their racing stats
         * @description Return the stat details about racing cars.
         */
        get: {
            parameters: {
                query: {
                    /** @description API key (Public) */
                    key: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['RaceCars'];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/racing/?selections=tracks': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get race tracks and descriptions
         * @description Return the details about racing tracks.
         */
        get: {
            parameters: {
                query: {
                    /** @description API key (Public) */
                    key: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['RaceTracks'];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/racing/?selections=carupgrades': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all possible car upgrades
         * @description Return the details about all possible car upgrades.
         */
        get: {
            parameters: {
                query: {
                    /** @description API key (Public) */
                    key: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['RaceCarUpgrades'];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/torn/?selections=subcrimes': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Subcrimes information
         * @description Return the details about possible actions for a specific crime.
         */
        get: {
            parameters: {
                query: {
                    /** @description API key (Public) */
                    key: string;
                    /** @description Crime id */
                    id: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['TornSubcrimes'];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/torn/?selections=crimes': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get crimes information
         * @description Return the details about released crimes.
         */
        get: {
            parameters: {
                query: {
                    /** @description API key (Public) */
                    key: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['TornCrimes'];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/torn/?selections=calendar': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get calendar information
         * @description Get the details about competitions & events in the running year.
         */
        get: {
            parameters: {
                query: {
                    /** @description API key (Public) */
                    key: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': {
                            calendar?: {
                                competitions?: components['schemas']['TornCalendarActivity'][];
                                events?: components['schemas']['TornCalendarActivity'][];
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/user/?selections=crimes': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user's crime statistics
         * @description Return the details and statistics about a user's specific crime.
         */
        get: {
            parameters: {
                query: {
                    /** @description API key (Minimal) */
                    key: string;
                    /** @description Crime id */
                    id: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['UserCrimeDetails'];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/user/?selections=races': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user races
         * @description Returns a list of user races, ordered by race start timestamp
         */
        get: {
            parameters: {
                query: {
                    /** @description API key (Minimal) */
                    key: string;
                    limit?: number;
                    /** @description Sorted by schedule.start field */
                    sort?: 'DESC' | 'ASC';
                    /** @description Timestamp until when started races are returned (schedule.start) */
                    to?: number;
                    /** @description Timestamp after when started races are returned (scheduled.start) */
                    from?: number;
                    /** @description Category of races returned */
                    cat?: 'official' | 'custom';
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['RaceDetails'];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/user/?selections=enlistedcars': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user enlisted cars
         * @description Returns a list of all user enlisted cars
         */
        get: {
            parameters: {
                query: {
                    /** @description API key (Minimal) */
                    key: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        'application/json': components['schemas']['UserRaceCarDetails'];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @enum {string} */
        RaceClassEnum: 'A' | 'B' | 'C' | 'D' | 'E';
        /** @enum {string} */
        RaceStatusEnum: 'open' | 'in_progress' | 'finished';
        /** @enum {string} */
        RaceCarUpgradeCategory:
            | 'Aerodynamics'
            | 'Brakes'
            | 'Engine'
            | 'Exhaust and Induction'
            | 'Fuel'
            | 'Safety'
            | 'Suspension'
            | 'Transmission'
            | 'Weight Reduction'
            | 'Wheels and Tyres';
        /** @enum {string} */
        RaceCarUpgradeSubCategory:
            | 'Engine Cooling'
            | 'Front Diffuser'
            | 'Rear Diffuser'
            | 'Spoiler'
            | 'Brake Accessory'
            | 'Brake Control'
            | 'Callipers'
            | 'Discs'
            | 'Brake Cooling'
            | 'Fluid'
            | 'Rear Control Arms'
            | 'Springs'
            | 'Upper Front Brace'
            | 'Clutch'
            | 'Differential'
            | 'Flywheel'
            | 'Gearbox'
            | 'Shifting'
            | 'Boot'
            | 'Hood'
            | 'Interior'
            | 'Roof'
            | 'Steering wheel'
            | 'Strip out'
            | 'Windows'
            | 'Tyres'
            | 'Wheels'
            | 'Rear Bushes'
            | 'Rear Brace'
            | 'Lower Front Brace'
            | 'Front Tie Rods'
            | 'Front Bushes'
            | 'Seat'
            | 'Safety Accessory'
            | 'Roll cage'
            | 'Overalls'
            | 'Helmet'
            | 'Fire Extinguisher'
            | 'Cut-off'
            | 'Fuel'
            | 'Manifold'
            | 'Exhaust'
            | 'Air Filter'
            | 'Turbo'
            | 'Pistons'
            | 'Intercooler'
            | 'Gasket'
            | 'Fuel Pump'
            | 'Engine Porting'
            | 'Engine Cleaning'
            | 'Computer'
            | 'Camshaft'
            | 'Pads'
            | 'Fluid';
        RaceId: number;
        RaceTrackId: number;
        RaceCarId: number;
        RaceCarUpgradeId: number;
        ItemId: number;
        UserId: number;
        ForumId: number;
        ForumThreadId: number;
        ForumPostId: number;
        RequestLinks: {
            /** @description Auto-generated link to get the next set of records */
            next?: string | null;
            /** @description Auto-generated link to get the prev set of records */
            prev?: string | null;
        };
        ForumCategories: {
            categories?: {
                id?: components['schemas']['ForumId'];
                title?: string;
                acronym?: string;
                threads?: number;
            }[];
        };
        ForumThreadAuthor: {
            id?: components['schemas']['UserId'];
            username?: string;
            karma?: number;
        };
        ForumPollVote: {
            answer?: string;
            votes?: number;
        };
        ForumPoll: {
            question?: string;
            answers_count?: number;
            answers?: components['schemas']['ForumPollVote'][];
        };
        ForumThreadBase: {
            id?: components['schemas']['ForumThreadId'];
            title?: string;
            forum_id?: components['schemas']['ForumId'];
            posts?: number;
            rating?: number;
            views?: number;
            author?: components['schemas']['ForumThreadAuthor'];
            last_poster?: components['schemas']['ForumThreadAuthor'];
            first_post_time?: number;
            last_post_time?: number | null;
            has_poll?: boolean;
            is_locked?: boolean;
            is_sticky?: boolean;
        };
        ForumThreadExtended: {
            content?: string;
            content_raw?: string;
            poll?: components['schemas']['ForumPoll'];
        } & components['schemas']['ForumThreadBase'];
        ForumPost: {
            id?: components['schemas']['ForumPostId'];
            author?: components['schemas']['ForumThreadAuthor'];
            /** @description Indicates whether post was made using the old formatting engine which doesn't use HTML */
            is_legacy?: boolean;
            is_topic?: boolean;
            is_edited?: boolean;
            is_pinned?: boolean;
            created_time?: number;
            edited_by?: components['schemas']['UserId'];
            has_quote?: boolean;
            /** @description 'quoted_post_id' is null when 'has_quote' is false. */
            quoted_post_id?: number | null;
            /** @description depending on the input 'cat' parameter, this will either return raw value (with HTML) or plain text. Legacy posts are returned as is, they can't be stripped of tags. */
            content?: string;
            likes?: number;
            dislikes?: number;
        };
        RaceCars: {
            cars?: components['schemas']['RaceCar'][];
        };
        RaceCar: {
            car_item_id?: components['schemas']['ItemId'];
            car_item_name?: string;
            top_speed?: number;
            acceleration?: number;
            braking?: number;
            dirt?: number;
            handling?: number;
            safety?: number;
            tarmac?: number;
            class?: components['schemas']['RaceClassEnum'];
        };
        RaceTracks: {
            tracks?: components['schemas']['RaceTrack'][];
        };
        RaceTrack: {
            id?: components['schemas']['RaceTrackId'];
            title?: string;
            description?: string;
        };
        RaceCarUpgrades: {
            carupgrades?: components['schemas']['RaceCarUpgrade'][];
        };
        RaceCarUpgrade: {
            id?: components['schemas']['RaceCarUpgradeId'];
            class_required?: components['schemas']['RaceClassEnum'];
            name?: string;
            description?: string;
            category?: components['schemas']['RaceCarUpgradeCategory'];
            subcategory?: components['schemas']['RaceCarUpgradeSubCategory'];
            effects?: {
                top_speed?: number;
                acceleration?: number;
                braking?: number;
                handling?: number;
                safety?: number;
                dirt?: number;
                tarmac?: number;
            };
            cost?: {
                points?: number;
                cash?: number;
            };
        };
        Races: {
            races?: components['schemas']['Race'][];
        };
        Race: {
            id?: components['schemas']['RaceId'];
            title?: string;
            track_id?: components['schemas']['RaceTrackId'];
            creator_id?: components['schemas']['UserId'];
            status?: components['schemas']['RaceStatusEnum'];
            laps?: number;
            participants?: {
                minimum?: number;
                maximum?: number;
                current?: number;
            };
            schedule?: {
                join_from?: number;
                join_until?: number;
                start?: number;
                end?: number | null;
            };
            requirements?: {
                car_class?: components['schemas']['RaceClassEnum'];
                driver_class?: components['schemas']['RaceClassEnum'];
                car_item_id?: components['schemas']['ItemId'];
                requires_stock_car?: boolean;
                requires_password?: boolean;
                join_fee?: number;
            };
        };
        RaceRecords: {
            records?: components['schemas']['RaceRecord'][];
        };
        RaceRecord: {
            driver_id?: components['schemas']['UserId'];
            driver_name?: string;
            car_item_id?: components['schemas']['ItemId'];
            lap_time?: number;
            car_item_name?: string;
        };
        RacerDetails: {
            driver_id?: components['schemas']['UserId'];
            position?: number | null;
            car_id?: components['schemas']['RaceCarId'];
            car_item_id?: components['schemas']['ItemId'];
            car_item_name?: string;
            car_class?: components['schemas']['RaceClassEnum'];
            has_crashed?: boolean | null;
            /** Format: float */
            best_lap_time?: number | null;
            /** Format: float */
            race_time?: number | null;
            time_ended?: number | null;
        };
        RaceDetails: {
            results?: components['schemas']['RacerDetails'][];
        } & components['schemas']['Race'];
        TornSubcrimes: {
            subcrimes?: components['schemas']['TornSubcrime'][];
        };
        TornSubcrime: {
            id?: number;
            name?: string;
            nerve_cost?: number;
        };
        TornCrimes: {
            crimes?: components['schemas']['TornCrime'][];
        };
        TornCrime: {
            id?: number;
            name?: string;
            category_id?: number;
            category_name?: string;
            enhancer_id?: number;
            enhancer_name?: string;
            unique_outcomes_count?: number;
            unique_outcomes_ids?: number[];
            notes?: string[];
        };
        TornCalendarActivity: {
            title?: string;
            description?: string;
            start?: number;
            end?: number;
        };
        UserCrimeDetailsBootlegging: {
            /** @description Online store statistics */
            online_store?: {
                earnings?: number;
                visits?: number;
                customers?: number;
                sales?: number;
            };
            /** @description DVD sales statistics */
            dvd_sales?: {
                action?: number;
                comedy?: number;
                drama?: number;
                fantasy?: number;
                horror?: number;
                romance?: number;
                thriller?: number;
                'sci-fi'?: number;
                total?: number;
                earnings?: number;
            };
            dvds_copied?: number;
        };
        UserCrimeDetailsGraffiti: {
            cans_used?: number;
            most_graffiti_in_one_area?: number;
            most_graffiti_simultaneously?: number;
            graffiti_removed?: number;
            cost_to_city?: number;
        };
        UserCrimeDetailsShoplifting: {
            average_notoriety?: number;
        };
        UserCrimeDetailsCardSkimming: {
            card_details?: {
                recoverable?: number;
                recovered?: number;
                sold?: number;
                lost?: number;
                areas?: {
                    id?: number;
                    amount?: number;
                }[];
            };
            skimmers?: {
                active?: number;
                most_lucrative?: number;
                oldest_recovered?: number;
                lost?: number;
            };
        };
        UserCrimeDetailsHustling: {
            total_audience_gathered?: number;
            biggest_money_won?: number;
            shill_money_collected?: number;
            pickpocket_money_collected?: number;
        };
        UserCrimeDetailsCracking: {
            brute_force_cycles?: number;
            encryption_layers_broken?: number;
            highest_mips?: number;
            chars_guessed?: number;
            chars_guessed_total?: number;
        };
        UserSubcrime: {
            id?: number;
            total?: number;
            success?: number;
            fail?: number;
        };
        UserCrimeRewardAmmo: {
            standard?: number;
            special?: number;
        };
        UserCrimeRewardItem: {
            id?: number;
            amount?: number;
        };
        UserCrimeRewards: {
            money?: number;
            ammo?: components['schemas']['UserCrimeRewardAmmo'];
            items?: components['schemas']['UserCrimeRewardItem'][];
        };
        UserCrimeAttempts: {
            total?: number;
            success?: number;
            fail?: number;
            critical_fail?: number;
            subcrimes?: components['schemas']['UserSubcrime'][];
        };
        UserCrimeDetails: {
            crimes?: components['schemas']['UserCrime'];
        };
        UserCrime: {
            nerve_spent?: number;
            skill?: number;
            progression_bonus?: number;
            achieved_uniques?: number[];
            rewards?: components['schemas']['UserCrimeRewards'];
            attempts?: components['schemas']['UserCrimeAttempts'];
            /** @description  Miscellaneous stats for specific crime. Results differ based on the cat id. */
            miscellaneous?:
                | components['schemas']['UserCrimeDetailsBootlegging']
                | components['schemas']['UserCrimeDetailsGraffiti']
                | components['schemas']['UserCrimeDetailsShoplifting']
                | components['schemas']['UserCrimeDetailsCardSkimming']
                | components['schemas']['UserCrimeDetailsHustling']
                | components['schemas']['UserCrimeDetailsCracking'];
        };
        UserRaceCarDetails: {
            id?: components['schemas']['RaceCarId'];
            name?: string;
            worth?: number;
            points_spent?: number;
            races_entered?: number;
            races_won?: number;
            is_removed?: boolean;
            parts?: components['schemas']['RaceCarUpgradeId'][];
        } & components['schemas']['RaceCar'];
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
